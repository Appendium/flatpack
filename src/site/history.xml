<document>
  <properties>
    <author email="Kit@objectlab.co.uk">Benoit Xhenseval</author>
    <title>History</title>
  </properties>
  <head>
    <meta name="description"
	content="PZFileReader offers configurable flat file CSV and fixed length parser, released under the business-friendly Apache 2.0 license."
	/>

    <meta name="keywords" content="CSV, Fixed length file parser" />
    <meta name="Subject" content="Date Calculators" />
    <meta name="Copyright" content="ObjectLab Financial Ltd" />
    <meta name="Language" content="English" />
    <meta name="Designer" content="ObjectLab Financial Ltd" />
    <meta name="Distribution" content="Global" />
    <meta name="robots" content="ALL"/>
    <meta name="Revisit-After" content="20 Days" />
  </head>
  <body>
    <!-- The body of the document contains a number of sections -->
    <section name="PZFileReader History">

    <p>The base code for PZFileReader was started from a project I worked on at my job.  At the time, I was writing quite 
    a few file imports which were mostly fixed width.  I kept encountering the same problem; we had to add something 
    to the file layout somewhere, or expand a length, thus changing all the substrings in the code.  I decided that 
    there must be a way to map out the file so that changing the file layout would not break the code.  This is when 
    PZFileReader was born, although it did not have a name as of yet.  The first iteration of the code had the field
    mappings in a database table, and seemed to work very well for my projects at work.</p>

    <p>At that time, I had been spending a lot of time on the Java Sun forums.  The same questions kept re-appearing.  
    How do I read a CSV file, or how do I read fixed text.  I decided that with a little more work, my project could 
    benefit the community.  Whenever I had some free time at home I started to make enhancements to the code.  
    I developed a way to map columns with an XML file instead of having to store the mapping in a database, and 
    a generic parser to handle any kind of delimited file, the delimited and qualifier were passed into the constructor.  </p>

	<p>This brings us to today.  Since the first release, there have been many fixes / enhancements to the parser, 
	mainly the delimited parser.  My hope is that this project will take off and become a fixture in the community.  
	If you have a good experience with this project, and it has benefited you in some way, please spread the word.</p>
    
    </section>

  </body>
</document>