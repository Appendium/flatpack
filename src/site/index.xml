<document>
  <properties>
    <author email="paulz17@yahoo.com">Paul Zepernick</author>
    <title>Introduction</title>
  </properties>
  <head>
    <meta name="description"
	content="Flat File Parser (fixed length, csv, etc) via XML Column Mappings, released under the business-friendly Apache 2.0 license."
	/>

    <meta name="keywords"
        content="Java CSV, Java Fixed Width, Open Source Java Parser, Java Delimited, Java Fixed Width, Java Flat File, Java Text Parser" />
    <meta name="Subject" content="Flat File Parser" />
    <!--<meta name="Copyright" content="ObjectLab Financial Ltd" />-->
    <meta name="Language" content="English" />
    <meta name="Designer" content="Paul Zepernick" />
    <meta name="Distribution" content="Global" />
    <meta name="robots" content="ALL"/>
    <meta name="Revisit-After" content="20 Days" />
  </head>
  <body>
    <!-- The body of the document contains a number of sections -->
    <section name="PZFileReader Introduction">

    <p>PZFileReader came out of the frustration of having to mix file parsing logic with business logic.</p>
    
    <p>PZFileReader on SourceForge: a Java (1.4+) flat file parser that handles CSV, fixed length and custom delimiters. The formats are configured in XML, it is fast and released under Apache license 2.0.</p>
    
    <p>Substrings in a <strong>fixed width parse</strong> can be daunting to deal with when trying to analyze what existing code is doing, 
    and what about when you have no comments...</p>
    
    <p>We also provide <strong>delimited file parsing</strong>; works with any delimiter / qualifier, multiline records, delimiter or qualifier allowed in column value.</p>
    
    <p>A manual is available as <a href="documentation/pzfilereader-manual.doc">Word</a> document or a <a href="documentation/pzfilereader-manual.pdf">PDF</a>.</p>
    
    <p>PZFileReader is part of the ObjectLab Kit family.<a href="http://digg.com/submit?phase=2&amp;url=objectlabkit.sourceforge.net&amp;title=Paul%20Zepernick%20and%20ObjectLab%20have%20released%20version%202%2E3%2E0%20of%20PZFileReader%2E&amp;bodytext=PZFileReader%20on%20SourceForge%3A%20a%20Java%20(1%2E4%2B)%20flat%20file%20parser%20that%20handles%20CSV,%20fixed%20length%20and%20custom%20delimiters%2E%20The%20formats%20are%20configured%20in%20XML%20or%20in%20DB%2E%20Once%20parsed%20the%20data%20is%20easily%20accessible%20record%20by%20record%20and%20via%20a%20column%20name,%20regardless%20of%20order%2E%20%20It%20is%20fast%20and%20released%20under%20Apache%20license%202%2E0%2E&amp;topic=programming">
    <img src="http://digg.com/img/badges/91x17-digg-button.png" width="91" height="17" alt="Digg!" style="vertical-align:middle" /></a></p>    

    <subsection name="Why should you use PZFileReader?">

	<p>There is more to it than one could imagine at first sight:</p>
	<ul>
	
	<li><strong>Problem Sorting Data Prior To File Processing?</strong></li>
	<ul><li>PZFileReader provides a sorting mechanism for your flat files.  This allows for your data to be properly sorted before processing your business logic.</li></ul>

    
    	<li><strong>Bad Numeric Data?</strong></li>
    	<ul><li>Do you often receive numeric data with dollar signs, or commas?  PZFileReader has the ability to strip these out and return as a double or int.  
            Even empty elements or hard spaces can be converted to a numeric without issue.</li></ul>

    	<li><strong>Problems With One Bad Record Blowing Up The Entire Parse?</strong></li>
        <ul><li>Bad records get excluded from the DataSet and added to an error collection.  This error collection can be checked at the end of the parse to 
        report on bad records.  A description of the error and the line number in the file is provided.  Why blow up an entire import for one bad record?</li></ul>
        </ul>
    </subsection>
    
    <subsection name="Which JDK?">
        <p>1.4 and up</p>
    </subsection>
    
    <subsection name="UML?">
    <p>We are using yDoc to generate a 'javadoc-like' documentation per module with the added twist of UML diagrams:</p>
    <ul>
       <li><a href="multiproject/pzfilereader/apidocs/index.html">UML for PZFileReader</a></li>
       <li><a href="multiproject/pzfilereader-examples/apidocs/index.html">UML for Examples</a></li>
    </ul>
    </subsection>

    </section>
    
    <section name="How do I use it?">
    <p>Basic Steps</p>
    <ol>
        <li>Construct DataSet() with a File, a InputStream or a Reader (soon)</li>
    	<li>Call DataSet.next() to advance record pointer</li>
    	<li>Process columns; DataSet.getString("colname"), getInt("colname"), getDouble("colname"), getDate("colname"), etc</li>
        <li>Check for parse errors; DataSet.getErrors()</li>
    	<li>Release memory early; DataSet.freeMemory()</li>
    </ol>
    
    <subsection name="Reading Delimited File">
    
    <div class="source"><pre>
        //construct DataSet
        DataSet ds = new DataSet(new File("ColumnMappings.pzmap.xml"), //xml mapping file
            new File("delimitedfile.txt"), //text file to parse
            ",", //delimiter
            "\"", //text qualifier (can be null or empty)
            true); //pad out missing columns (we mapped 5 columns but only 3 were there)
            
        while (ds.next()){ //loop through file
            ds.getString("mycolumnName");
        }
        
        ds.freeMemory(); // probably should be in a finally.
    </pre></div>
      
    </subsection>

    <subsection name="Reading Fixed Width File">
    
    <div class="source"><pre>
        //construct DataSet
        DataSet ds = new DataSet(new File("PEOPLE-FixedLength.pzmap.xml"), //xml mapping file
            new File("PEOPLE-FixedLength.txt")); //text file to parse
            
        while (ds.next()){ //loop through file
            ds.getString("mycolumnName");
        }
        
        ds.freeMemory();
    </pre></div>
      
    </subsection>

    <subsection name="Reading a Message of Fixed Width">
    
    <div class="source"><pre>

... coming soon

    </pre></div>
      
    </subsection>

    </section>

  </body>
</document>